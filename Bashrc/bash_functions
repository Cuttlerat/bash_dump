#!/usr/bin/env bash
# ~/.bash_functions


cd() {
    builtin cd "$@" && ls
}


mkcd() {
    #[[ $# -ne 1 ]] && echo "Works only for 1 dir" && return 1
    for dir; do
        mkdir -p "${dir}"
    done
    cd "${!#}"
}


jq() {
    [[ $# -eq 0 ]] && args="." || args="$@"
    command jq "${args[@]}"
}


vim() {
    case $# in
        0)
            local temp_file="$(mktemp -t vim.XXXXXXXX)"
            ${EDITOR} "${temp_file}"
            rm -rfi "${temp_file}"
            ;;
        1)
            ${EDITOR} "$1"
            ;;
        *)
            local first="$1"
            while [[ $# -ne 1 ]]; do
                shift
                nohup termite -e "${EDITOR} $1" &>/dev/null &
            done
            ${EDITOR} "${first}"
            ;;
    esac
}


up() {
    # $1 - How much dirs to go back
    local up_dirs="${1:-1}"
    local dir

    for i in $(seq "${up_dirs}"); do
        dir="${dir}../"
    done
    cd "${dir}"
}


gcp() {
    # [g]it [c]ommit [p]ush
    local comment="${1:-"Autocommit by Aleksei Kioller"}"

    cdg >/dev/null
    git commit -a -m "${comment}" && git push
    cd - >/dev/null
}


gbc() {
    # [g]it [b]ranch [c]heckout
    local branch_name="$1"
    
    git checkout -b "${branch_name}"
    git push --set-upstream origin "${branch_name}"
}


gpr() {
    # $1 - Parent branch (default - master)
    # $2 - Repo (default - from remote.origin.url)
    local current=`git branch | grep '*'`
    local parent="${1:-master}"
    local repo="${2:-$(git config --get remote.origin.url | sed '/@/s/[^:]*://; /https/s/.*\.com\///; s/\.git$//')}"

    firefox "https://github.com/${repo/* /}/compare/${parent/* /}...themsaid:${current/* /}?expand=1"
}


git_branch() {
    git rev-parse --abbrev-ref HEAD 2>&- | sed 's/.\+/[&]/g'
}


timer_start() {
    TIMER="${TIMER:-$SECONDS}"
}


timer_stop() {
    TIMER_SHOW="$((${SECONDS} - ${TIMER}))"
    unset TIMER
}


arole() {
    # $1 - Name of new role
    # $2 - Host or group for this role (keep it empty for all)
    local role_name="$1"
    local hosts="${2:-all}"

    [[ -d "./group_vars" ]] || [[ -d "./roles" ]] || return 1
    for role_dir in "./roles/${1}/"{tasks,defaults}; do
        mkdir -p "${role_dir}"
        if [ ! -f "${role_dir}/main.yml" ]; then
            touch "${role_dir}/main.yml"
            echo "---" > "${role_dir}/main.yml"
        fi
    done
    if [ ! -f "./${role_name}.yml" ]; then
        cat > "./${role_name}.yml" <<-EOF
	---
	- hosts: ${hosts}
	  roles:
	    - ${role_name}
	EOF
    fi
    cd "./roles/${role_name}/"
    ${EDITOR} "./tasks/main.yml"
}


atask() {
    # $1 - Name of role to open the main task
    local role="${1%%.yml}"
    local main_task="./roles/${role}/tasks/main.yml"

    if [[ -f "${main_task}" ]]; then
        ${EDITOR} "${main_task}"
    else
        echo "File ${main_task} does not exists!"
        return 1
    fi
}


genpass() {
    # $1 - Password length
    local length="${1:-32}"
    tr -dc a-zA-Z0-9 </dev/urandom | head -c "${length}"
    echo
}
