#!/usr/bin/env bash
# ~/.bash_functions


cd() {
    command cd "$@" && ls
}


jq() {
    args="$@"
    [[ $# -eq 0 ]] && args="."
    command jq "${args[@]}"
}


vim() {
    case $# in
        0)
            local temp_file="$(mktemp -t vim.XXXXXXXX)"
            ${EDITOR} "${temp_file}"
            rm -rf "${temp_file}"
            ;;
        1)
            ${EDITOR} "$1"
            ;;
        *)
            first="$1"
            while [[ $# -ne 1 ]]; do
                shift
                nohup termite -e "${EDITOR} $1" &>/dev/null &
            done
            ${EDITOR} "${first}"
            ;;
    esac
}


up() {
    # $1 - How much dirs to go back
    local up_dirs="${1:-1}"
    local dir

    for i in $(seq "${up_dirs}"); do
        dir="${dir}../"
    done
    cd "${dir}"
}


gcp() {
    # [g]it [c]ommit [p]ush
    cdg >/dev/null
    git add . && git commit -m "${1:-"Fast commit by Cuttlerat"}" && git push
    cd - >/dev/null
}


gbc() {
    # [g]it [b]ranch [c]heckout
    local branch_name="$1"
    
    git branch "${branch_name}"
    git checkout "${branch_name}"
    git push --set-upstream origin "${branch_name}"
}


git_branch() {
  git rev-parse --abbrev-ref HEAD 2>&- | sed 's/.\+/[&]/g'
}


timer_start() {
  TIMER="${TIMER:-$SECONDS}"
}

timer_stop() {
  TIMER_SHOW="$((${SECONDS} - ${TIMER}))"
  unset TIMER
}


org() {
    # $1 - Date in one of format:
    #    + DD.MM
    #    + DD.MM.YY
    #    + DD.MM.YYYY
    local date="$1"
    local orgpath="${ORGPATH:-${HOME}/.org}"
    local day=$(date +'%d')
    local month=$(date +'%m')
    local year=$(date +'%Y')

    if [[ $# -eq 1 ]]; then
        read day month year <<<"${date/./ }"
        : "${year:="$(date +%Y)"}"
        [[ "$(printf "${year}" | wc -m)" -eq 2 ]] && year="20${year}"
    else
        echo "Usage: 'org' or 'org DD.MM' or 'org DD.MM.YY'"
        return
    fi
    mkdir -p "${orgpath}/${year}/${month}"
    orgfile="${orgpath}/${year}/${month}/${day}.org"
    if [[ ! -f "${orgfile}" ]]; then
        cat >"${orgfile}" <<-EOF
	#+AUTHOR:   Aleksei Kioller
	#+EMAIL:    avkioller@gmail.com
	#+LANGUAGE: ru
	           
	EOF
    fi
    ${EDITOR} "${orgfile}"
}


arole() {
    # $1 - Name of new role
    # $2 - Host or group for this role (keep it empty for all)
    local role_name="$1"
    local hosts="${2:-all}"
    
    [[ -d "./group_vars" ]] || [[ -d "./roles" ]] || return 1
    for role_dir in "./roles/${1}/"{tasks,defaults}; do
        mkdir -p "${role_dir}"
        if [ ! -f "${role_dir}/main.yml" ]; then
            touch "${role_dir}/main.yml"
            echo "---" > "${role_dir}/main.yml"
        fi
    done
    if [ ! -f "./${role_name}.yml" ]; then
        cat > "./${role_name}.yml" <<-EOF
	---
	- hosts: ${hosts}
	  roles:
	    - ${role_name}
	EOF
    fi
    cd "./roles/${role_name}/"
    ${EDITOR} "./tasks/main.yml"
}


atask() {
    # $1 - Name of role to open the main task
    local role="${1%%.yml}"
    local file_path="./roles/${role}/tasks/main.yml"

    if [[ -f "${file_path}" ]]; then
        ${EDITOR} "${file_path}"
    else
        echo "File ${file_path} does not exists!"
        return 1
    fi
}
