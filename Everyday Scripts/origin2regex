#!/bin/bash

set -eu
[[ "${TRACE:-}" ]] && set -x

usage() {
    cat <<-EOF
	Dig all IP addresses by origin of given domain name and turn them into regular expressions
	
	Options:
	    -h, --help        show this help
	    -c, --clean       return IP addresses as clean, not in regex patterns
		
	EOF
}

parse_args() {

    while [[ $# -gt 0 ]]; do
        case "$1" in
            -h|--help)
                    usage
                    exit 0
                    ;;
            -c|--clean)
                    clean="true"
                    shift
                    ;;
            *)
                    domain_name="$1"
                    shift
                    ;;
        esac
    done
}

check_packages() {

    local packages=("$@")
    for package in "${packages[@]}"; do
      if [[ ! $(which "${package}") ]]; then
          echo "${package} is not installed"
          exit 1
      fi
    done
}

main() {

    check_packages dig rgxg whois
    declare domain_name clean="false"
    parse_args "$@"

    local dig_ip="$(dig "${domain_name}" +short | head -1)"
    local origin="$(whois -h whois.radb.net "${dig_ip}" | awk '/origin:/{print $2}')"
    local ip_array=($(whois -h whois.radb.net -i origin -T route "${origin}" | grep -w "route:" | awk '{print $NF}' | sort -n))
    
    for found_ip in "${ip_array[@]}"; do
        if "${clean}"; then
            echo "${found_ip}"
        else
            rgxg cidr "${found_ip}"
        fi
    done
}

main "$@"
